{"version":3,"sources":["components/Conditions/Conditions.js","components/Forecast/Forecast.js","App.js","serviceWorker.js","index.js"],"names":["Conditions","props","responseObj","cod","name","Math","round","main","temp","weather","description","Forecast","useState","city","setCity","setResponseObj","uriEncodedCity","encodeURIComponent","onSubmit","e","preventDefault","fetch","then","response","json","type","placeholder","maxLength","value","onChange","target","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oQAgBeA,EAdI,SAACC,GACjB,OACI,6BAC+B,MAA1BA,EAAMC,YAAYC,IACf,6BACI,2BAAG,gCAASF,EAAMC,YAAYE,OAC9B,8CAAoBC,KAAKC,MAAML,EAAMC,YAAYK,KAAKC,MAAtD,yBAAmFP,EAAMC,YAAYO,QAAQ,GAAGC,YAAhH,MAEN,OC2BEC,EAlCE,WAAO,IAAD,EACGC,mBAAS,IADZ,mBACdC,EADc,KACRC,EADQ,OAEiBF,mBAAS,IAF1B,mBAEdV,EAFc,KAEDa,EAFC,KAGbC,EAAiBC,mBAAmBJ,GAa1C,OACI,6BACG,+DACA,0BAAMK,SAfb,SAAqBC,GAEjBA,EAAEC,iBAEFC,MAAM,+DAAD,OAAgEL,GAAkB,CACnF,OAAU,QAEbM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACFR,EAAeQ,QAOX,2BACIE,KAAK,OACLC,YAAY,aACZC,UAAU,KACVC,MAAOf,EACPgB,SAAU,SAACV,GAAD,OAAOL,EAAQK,EAAEW,OAAOF,UAEtC,4BAAQH,KAAK,UAAb,iBAEL,kBAAC,EAAD,CAAYvB,YAAaA,MCfrB6B,MAbf,WACC,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kDAEF,8BACE,kBAAC,EAAD,SCCaC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1a432480.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Conditions = (props) => {\r\n   return (\r\n       <div>\r\n           {props.responseObj.cod === 200 ?\r\n               <div>\r\n                   <p><strong>{props.responseObj.name}</strong></p>\r\n                   <p>It is currently {Math.round(props.responseObj.main.temp)} degrees outside with {props.responseObj.weather[0].description}.</p>\r\n               </div>\r\n           : null\r\n           }\r\n       </div>\r\n   )\r\n}\r\n\r\nexport default Conditions;","import React, { useState } from 'react';\r\nimport Conditions from '../Conditions/Conditions';\r\n\r\nconst Forecast = () => {\r\n    let [city, setCity] = useState('');\r\n    let [responseObj, setResponseObj] = useState({});\r\n    const uriEncodedCity = encodeURIComponent(city);\r\n    function getForecast(e) {\r\n\r\n        e.preventDefault();\r\n\r\n        fetch(`https://weatherapi-backend.azurewebsites.net/api/WeatherAPI/${uriEncodedCity}`, {\r\n            \"method\": \"GET\",\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            setResponseObj(response)\r\n        })\r\n    }\r\n    return (\r\n        <div>\r\n           <h2>Find Current Weather Conditions</h2>\r\n           <form onSubmit={getForecast}>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Enter City\"\r\n                    maxLength=\"50\"\r\n                    value={city}\r\n                    onChange={(e) => setCity(e.target.value)}\r\n                    />\r\n                <button type=\"submit\">Get Forecast</button>\r\n            </form>\r\n           <Conditions responseObj={responseObj}/>\r\n       </div>\r\n    )\r\n}\r\n\r\nexport default Forecast;","import React from 'react';\nimport './App.css';\nimport Forecast from \"./components/Forecast/Forecast\";\n\nfunction App() {\n return (\n   <div className=\"App\">\n     <header className=\"App-header\">\n       <h1>React Weather App</h1>\n     </header>\n     <main>\n       <Forecast />\n     </main>\n   </div>\n );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}